// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMcontentTexts(t *testing.T) {
	t.Parallel()

	query := McontentTexts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMcontentTextsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMcontentTextsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := McontentTexts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMcontentTextsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := McontentTextSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMcontentTextsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := McontentTextExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if McontentText exists: %s", err)
	}
	if !e {
		t.Errorf("Expected McontentTextExists to return true, but got false.")
	}
}

func testMcontentTextsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mcontentTextFound, err := FindMcontentText(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mcontentTextFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMcontentTextsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = McontentTexts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMcontentTextsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := McontentTexts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMcontentTextsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mcontentTextOne := &McontentText{}
	mcontentTextTwo := &McontentText{}
	if err = randomize.Struct(seed, mcontentTextOne, mcontentTextDBTypes, false, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}
	if err = randomize.Struct(seed, mcontentTextTwo, mcontentTextDBTypes, false, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mcontentTextOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mcontentTextTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := McontentTexts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMcontentTextsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mcontentTextOne := &McontentText{}
	mcontentTextTwo := &McontentText{}
	if err = randomize.Struct(seed, mcontentTextOne, mcontentTextDBTypes, false, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}
	if err = randomize.Struct(seed, mcontentTextTwo, mcontentTextDBTypes, false, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mcontentTextOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mcontentTextTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mcontentTextBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func mcontentTextAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func mcontentTextAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func mcontentTextBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func mcontentTextAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func mcontentTextBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func mcontentTextAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func mcontentTextBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func mcontentTextAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *McontentText) error {
	*o = McontentText{}
	return nil
}

func testMcontentTextsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &McontentText{}
	o := &McontentText{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, false); err != nil {
		t.Errorf("Unable to randomize McontentText object: %s", err)
	}

	AddMcontentTextHook(boil.BeforeInsertHook, mcontentTextBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mcontentTextBeforeInsertHooks = []McontentTextHook{}

	AddMcontentTextHook(boil.AfterInsertHook, mcontentTextAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mcontentTextAfterInsertHooks = []McontentTextHook{}

	AddMcontentTextHook(boil.AfterSelectHook, mcontentTextAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mcontentTextAfterSelectHooks = []McontentTextHook{}

	AddMcontentTextHook(boil.BeforeUpdateHook, mcontentTextBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mcontentTextBeforeUpdateHooks = []McontentTextHook{}

	AddMcontentTextHook(boil.AfterUpdateHook, mcontentTextAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mcontentTextAfterUpdateHooks = []McontentTextHook{}

	AddMcontentTextHook(boil.BeforeDeleteHook, mcontentTextBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mcontentTextBeforeDeleteHooks = []McontentTextHook{}

	AddMcontentTextHook(boil.AfterDeleteHook, mcontentTextAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mcontentTextAfterDeleteHooks = []McontentTextHook{}

	AddMcontentTextHook(boil.BeforeUpsertHook, mcontentTextBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mcontentTextBeforeUpsertHooks = []McontentTextHook{}

	AddMcontentTextHook(boil.AfterUpsertHook, mcontentTextAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mcontentTextAfterUpsertHooks = []McontentTextHook{}
}

func testMcontentTextsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMcontentTextsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mcontentTextColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMcontentTextToOneMcontentUsingMcontent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local McontentText
	var foreign Mcontent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mcontentTextDBTypes, false, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mcontentDBTypes, false, mcontentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mcontent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.McontentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Mcontent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := McontentTextSlice{&local}
	if err = local.L.LoadMcontent(ctx, tx, false, (*[]*McontentText)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Mcontent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Mcontent = nil
	if err = local.L.LoadMcontent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Mcontent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMcontentTextToOneSetOpMcontentUsingMcontent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a McontentText
	var b, c Mcontent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mcontentTextDBTypes, false, strmangle.SetComplement(mcontentTextPrimaryKeyColumns, mcontentTextColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mcontentDBTypes, false, strmangle.SetComplement(mcontentPrimaryKeyColumns, mcontentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mcontentDBTypes, false, strmangle.SetComplement(mcontentPrimaryKeyColumns, mcontentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Mcontent{&b, &c} {
		err = a.SetMcontent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Mcontent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.McontentTexts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.McontentID != x.ID {
			t.Error("foreign key was wrong value", a.McontentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.McontentID))
		reflect.Indirect(reflect.ValueOf(&a.McontentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.McontentID != x.ID {
			t.Error("foreign key was wrong value", a.McontentID, x.ID)
		}
	}
}

func testMcontentTextsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMcontentTextsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := McontentTextSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMcontentTextsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := McontentTexts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mcontentTextDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Lang`: `text`, `Title`: `text`, `Subtitle`: `text`, `Detail`: `text`, `Xtext1`: `text`, `CreatorID`: `integer`, `McontentID`: `integer`}
	_                   = bytes.MinRead
)

func testMcontentTextsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mcontentTextPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mcontentTextColumns) == len(mcontentTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMcontentTextsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mcontentTextColumns) == len(mcontentTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &McontentText{}
	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mcontentTextDBTypes, true, mcontentTextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mcontentTextColumns, mcontentTextPrimaryKeyColumns) {
		fields = mcontentTextColumns
	} else {
		fields = strmangle.SetComplement(
			mcontentTextColumns,
			mcontentTextPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := McontentTextSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMcontentTextsUpsert(t *testing.T) {
	t.Parallel()

	if len(mcontentTextColumns) == len(mcontentTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := McontentText{}
	if err = randomize.Struct(seed, &o, mcontentTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert McontentText: %s", err)
	}

	count, err := McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mcontentTextDBTypes, false, mcontentTextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize McontentText struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert McontentText: %s", err)
	}

	count, err = McontentTexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
