// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Mcontent is an object representing the database table.
type Mcontent struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Label       string      `boil:"label" json:"label" toml:"label" yaml:"label"`
	ContentType string      `boil:"content_type" json:"content_type" toml:"content_type" yaml:"content_type"`
	StartAt     null.Time   `boil:"start_at" json:"start_at,omitempty" toml:"start_at" yaml:"start_at,omitempty"`
	EndAt       null.Time   `boil:"end_at" json:"end_at,omitempty" toml:"end_at" yaml:"end_at,omitempty"`
	Status      null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Xtime1      null.Time   `boil:"xtime1" json:"xtime1,omitempty" toml:"xtime1" yaml:"xtime1,omitempty"`
	Xbool1      null.Bool   `boil:"xbool1" json:"xbool1,omitempty" toml:"xbool1" yaml:"xbool1,omitempty"`
	CreatorID   null.Int    `boil:"creator_id" json:"creator_id,omitempty" toml:"creator_id" yaml:"creator_id,omitempty"`

	R *mcontentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mcontentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var McontentColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	Label       string
	ContentType string
	StartAt     string
	EndAt       string
	Status      string
	Xtime1      string
	Xbool1      string
	CreatorID   string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	Label:       "label",
	ContentType: "content_type",
	StartAt:     "start_at",
	EndAt:       "end_at",
	Status:      "status",
	Xtime1:      "xtime1",
	Xbool1:      "xbool1",
	CreatorID:   "creator_id",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var McontentWhere = struct {
	ID          whereHelperint
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
	Label       whereHelperstring
	ContentType whereHelperstring
	StartAt     whereHelpernull_Time
	EndAt       whereHelpernull_Time
	Status      whereHelpernull_String
	Xtime1      whereHelpernull_Time
	Xbool1      whereHelpernull_Bool
	CreatorID   whereHelpernull_Int
}{
	ID:          whereHelperint{field: `id`},
	CreatedAt:   whereHelpernull_Time{field: `created_at`},
	UpdatedAt:   whereHelpernull_Time{field: `updated_at`},
	DeletedAt:   whereHelpernull_Time{field: `deleted_at`},
	Label:       whereHelperstring{field: `label`},
	ContentType: whereHelperstring{field: `content_type`},
	StartAt:     whereHelpernull_Time{field: `start_at`},
	EndAt:       whereHelpernull_Time{field: `end_at`},
	Status:      whereHelpernull_String{field: `status`},
	Xtime1:      whereHelpernull_Time{field: `xtime1`},
	Xbool1:      whereHelpernull_Bool{field: `xbool1`},
	CreatorID:   whereHelpernull_Int{field: `creator_id`},
}

// McontentRels is where relationship names are stored.
var McontentRels = struct {
	McontentTexts string
}{
	McontentTexts: "McontentTexts",
}

// mcontentR is where relationships are stored.
type mcontentR struct {
	McontentTexts McontentTextSlice
}

// NewStruct creates a new relationship struct
func (*mcontentR) NewStruct() *mcontentR {
	return &mcontentR{}
}

// mcontentL is where Load methods for each relationship are stored.
type mcontentL struct{}

var (
	mcontentColumns               = []string{"id", "created_at", "updated_at", "deleted_at", "label", "content_type", "start_at", "end_at", "status", "xtime1", "xbool1", "creator_id"}
	mcontentColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "start_at", "end_at", "status", "xtime1", "xbool1", "creator_id"}
	mcontentColumnsWithDefault    = []string{"id", "label", "content_type"}
	mcontentPrimaryKeyColumns     = []string{"id"}
)

type (
	// McontentSlice is an alias for a slice of pointers to Mcontent.
	// This should generally be used opposed to []Mcontent.
	McontentSlice []*Mcontent
	// McontentHook is the signature for custom Mcontent hook methods
	McontentHook func(context.Context, boil.ContextExecutor, *Mcontent) error

	mcontentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mcontentType                 = reflect.TypeOf(&Mcontent{})
	mcontentMapping              = queries.MakeStructMapping(mcontentType)
	mcontentPrimaryKeyMapping, _ = queries.BindMapping(mcontentType, mcontentMapping, mcontentPrimaryKeyColumns)
	mcontentInsertCacheMut       sync.RWMutex
	mcontentInsertCache          = make(map[string]insertCache)
	mcontentUpdateCacheMut       sync.RWMutex
	mcontentUpdateCache          = make(map[string]updateCache)
	mcontentUpsertCacheMut       sync.RWMutex
	mcontentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mcontentBeforeInsertHooks []McontentHook
var mcontentBeforeUpdateHooks []McontentHook
var mcontentBeforeDeleteHooks []McontentHook
var mcontentBeforeUpsertHooks []McontentHook

var mcontentAfterInsertHooks []McontentHook
var mcontentAfterSelectHooks []McontentHook
var mcontentAfterUpdateHooks []McontentHook
var mcontentAfterDeleteHooks []McontentHook
var mcontentAfterUpsertHooks []McontentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mcontent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mcontent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mcontent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mcontent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mcontent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mcontent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mcontent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mcontent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mcontent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mcontentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMcontentHook registers your hook function for all future operations.
func AddMcontentHook(hookPoint boil.HookPoint, mcontentHook McontentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mcontentBeforeInsertHooks = append(mcontentBeforeInsertHooks, mcontentHook)
	case boil.BeforeUpdateHook:
		mcontentBeforeUpdateHooks = append(mcontentBeforeUpdateHooks, mcontentHook)
	case boil.BeforeDeleteHook:
		mcontentBeforeDeleteHooks = append(mcontentBeforeDeleteHooks, mcontentHook)
	case boil.BeforeUpsertHook:
		mcontentBeforeUpsertHooks = append(mcontentBeforeUpsertHooks, mcontentHook)
	case boil.AfterInsertHook:
		mcontentAfterInsertHooks = append(mcontentAfterInsertHooks, mcontentHook)
	case boil.AfterSelectHook:
		mcontentAfterSelectHooks = append(mcontentAfterSelectHooks, mcontentHook)
	case boil.AfterUpdateHook:
		mcontentAfterUpdateHooks = append(mcontentAfterUpdateHooks, mcontentHook)
	case boil.AfterDeleteHook:
		mcontentAfterDeleteHooks = append(mcontentAfterDeleteHooks, mcontentHook)
	case boil.AfterUpsertHook:
		mcontentAfterUpsertHooks = append(mcontentAfterUpsertHooks, mcontentHook)
	}
}

// One returns a single mcontent record from the query.
func (q mcontentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Mcontent, error) {
	o := &Mcontent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mcontents")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Mcontent records from the query.
func (q mcontentQuery) All(ctx context.Context, exec boil.ContextExecutor) (McontentSlice, error) {
	var o []*Mcontent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Mcontent slice")
	}

	if len(mcontentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Mcontent records in the query.
func (q mcontentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mcontents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mcontentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mcontents exists")
	}

	return count > 0, nil
}

// McontentTexts retrieves all the mcontent_text's McontentTexts with an executor.
func (o *Mcontent) McontentTexts(mods ...qm.QueryMod) mcontentTextQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mcontent_texts\".\"mcontent_id\"=?", o.ID),
	)

	query := McontentTexts(queryMods...)
	queries.SetFrom(query.Query, "\"mcontent_texts\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mcontent_texts\".*"})
	}

	return query
}

// LoadMcontentTexts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mcontentL) LoadMcontentTexts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMcontent interface{}, mods queries.Applicator) error {
	var slice []*Mcontent
	var object *Mcontent

	if singular {
		object = maybeMcontent.(*Mcontent)
	} else {
		slice = *maybeMcontent.(*[]*Mcontent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mcontentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mcontentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mcontent_texts`), qm.WhereIn(`mcontent_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mcontent_texts")
	}

	var resultSlice []*McontentText
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mcontent_texts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mcontent_texts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mcontent_texts")
	}

	if len(mcontentTextAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.McontentTexts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mcontentTextR{}
			}
			foreign.R.Mcontent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.McontentID {
				local.R.McontentTexts = append(local.R.McontentTexts, foreign)
				if foreign.R == nil {
					foreign.R = &mcontentTextR{}
				}
				foreign.R.Mcontent = local
				break
			}
		}
	}

	return nil
}

// AddMcontentTexts adds the given related objects to the existing relationships
// of the mcontent, optionally inserting them as new records.
// Appends related to o.R.McontentTexts.
// Sets related.R.Mcontent appropriately.
func (o *Mcontent) AddMcontentTexts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*McontentText) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.McontentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mcontent_texts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mcontent_id"}),
				strmangle.WhereClause("\"", "\"", 2, mcontentTextPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.McontentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mcontentR{
			McontentTexts: related,
		}
	} else {
		o.R.McontentTexts = append(o.R.McontentTexts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mcontentTextR{
				Mcontent: o,
			}
		} else {
			rel.R.Mcontent = o
		}
	}
	return nil
}

// Mcontents retrieves all the records using an executor.
func Mcontents(mods ...qm.QueryMod) mcontentQuery {
	mods = append(mods, qm.From("\"mcontents\""))
	return mcontentQuery{NewQuery(mods...)}
}

// FindMcontent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMcontent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Mcontent, error) {
	mcontentObj := &Mcontent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mcontents\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mcontentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mcontents")
	}

	return mcontentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mcontent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mcontents provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mcontentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mcontentInsertCacheMut.RLock()
	cache, cached := mcontentInsertCache[key]
	mcontentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mcontentColumns,
			mcontentColumnsWithDefault,
			mcontentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mcontentType, mcontentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mcontentType, mcontentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mcontents\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mcontents\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mcontents")
	}

	if !cached {
		mcontentInsertCacheMut.Lock()
		mcontentInsertCache[key] = cache
		mcontentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Mcontent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mcontent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mcontentUpdateCacheMut.RLock()
	cache, cached := mcontentUpdateCache[key]
	mcontentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mcontentColumns,
			mcontentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mcontents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mcontents\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mcontentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mcontentType, mcontentMapping, append(wl, mcontentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mcontents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mcontents")
	}

	if !cached {
		mcontentUpdateCacheMut.Lock()
		mcontentUpdateCache[key] = cache
		mcontentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mcontentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mcontents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mcontents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o McontentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mcontentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mcontents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mcontentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mcontent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mcontent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mcontent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mcontents provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mcontentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mcontentUpsertCacheMut.RLock()
	cache, cached := mcontentUpsertCache[key]
	mcontentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mcontentColumns,
			mcontentColumnsWithDefault,
			mcontentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mcontentColumns,
			mcontentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mcontents, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mcontentPrimaryKeyColumns))
			copy(conflict, mcontentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mcontents\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mcontentType, mcontentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mcontentType, mcontentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mcontents")
	}

	if !cached {
		mcontentUpsertCacheMut.Lock()
		mcontentUpsertCache[key] = cache
		mcontentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Mcontent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mcontent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Mcontent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mcontentPrimaryKeyMapping)
	sql := "DELETE FROM \"mcontents\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mcontents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mcontents")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mcontentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mcontentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mcontents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mcontents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o McontentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Mcontent slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mcontentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mcontentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mcontents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mcontentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mcontent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mcontents")
	}

	if len(mcontentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mcontent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMcontent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *McontentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := McontentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mcontentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mcontents\".* FROM \"mcontents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mcontentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in McontentSlice")
	}

	*o = slice

	return nil
}

// McontentExists checks if the Mcontent row exists.
func McontentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mcontents\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mcontents exists")
	}

	return exists, nil
}
